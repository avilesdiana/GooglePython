list = ["This", "is", "a", "list"]. 

-Use the len() function to return the number of elements in a list: 
len(list) would return 4. 

-Use the in keyword to check if a list contains a certain element. If the element is present, it will return a True boolean. 
If the element is not found in the list, it will return False. 
For example, "This" in list would return True in our example. 

-Use indexing to access specific elements in a list based on their position. You can access the first element in a list by doing list[0], 
which would allow you to access the string "This".

Theyâ€™re both examples of sequences of data. Sequences have similar properties, like:
(1) being able to iterate over them using for loops; 
(2) support indexing; 
(3) using the len function to find the length of the sequence; 
(4) using the plus operator + in order to concatenate;
(5) using the in keyword to check if the sequence contains a value. 

Common sequence operations

    -len(sequence) Returns the length of the sequence
    -for element in sequence Iterates over each element in the sequence
    -if element in sequence Checks whether the element is part of the sequence
    -sequence[i] Accesses the element at index i of the sequence, starting at zero
    -sequence[i:j] Accesses a slice starting at index i, ending at index j-1. If i is omitted, it's 0 by default. If j is omitted, it's len(sequence) by default.
    -for index, element in enumerate(sequence) Iterates over both the indexes and the elements in the sequence at the same time

https://docs.python.org/3/library/stdtypes.html#sequence-types-list-tuple-range



List-specific operations and methods

    -list[i] = x Replaces the element at index i with x
    -list.append(x) Inserts x at the end of the list
    -list.insert(i, x) Inserts x at index i
    -list.pop(i) Returns the element a index i, also removing it from the list. If i is omitted, the last element is returned and removed.
    -list.remove(x) Removes the first occurrence of x in the list
    -list.sort() Sorts the items in the list
    -list.reverse() Reverses the order of items of the list
    -list.clear() Removes all the items of the list
    -list.copy() Creates a copy of the list
    -list.extend(other_list) Appends all the elements of other_list at the end of list

- https://docs.python.org/3/library/stdtypes.html#mutable-sequence-types
- https://docs.python.org/3/library/stdtypes.html#lists


List comprehension

    -[expression for variable in sequence] Creates a new list based on the given sequence. 
      Each element is the result of the given expression.
    -[expression for variable in sequence if condition] Creates a new list based on the given sequence. Each element is the result of the given 
      expression; elements only get added if the condition is true.  
